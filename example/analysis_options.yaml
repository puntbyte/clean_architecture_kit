# This file configures the Dart analyzer and the `architecture_kit` plugin.
# It demonstrates a complete and robust setup for a feature-first Flutter project.

# The `analyzer.plugins` section should only contain `custom_lint`.
# The custom_lint framework discovers all other lint packages, like `architecture_kit`,
# automatically from the project's dev_dependencies.
formatter:
  page_width: 100

analyzer:
  plugins:
    - custom_lint
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

# The top-level `custom_lint` key manages all custom linting.
# The `rules` list is used to both enable/disable individual lints AND
# to provide the shared configuration for a plugin.
custom_lint:
  rules:
    # --- ENABLE/DISABLE INDIVIDUAL LINT RULES ---
    # To disable a rule, set its value to `false`.

    # Purity Rules
    - domain_layer_purity: true
    - data_source_purity: true
    - presentation_layer_purity: true
    - repository_implementation_purity: true
    - disallow_flutter_imports_in_domain: true
    - disallow_flutter_types_in_domain: true

    # Dependency & Structure Rules
    - enforce_layer_independence: true
    - enforce_abstract_data_source_dependency: true
    - enforce_file_and_folder_location: true

    # Naming, Type Safety & Inheritance Rules
    - enforce_naming_conventions: true
    - enforce_custom_return_type: true
    - enforce_use_case_inheritance: true
    - enforce_repository_inheritance: true

    # Code Generation Rule
    - missing_use_case: true

    # --- SHARED CONFIGURATION for the 'architecture_kit' plugin ---
    # The configuration map is provided as a special entry in the rules list.
    - clean_architecture:
      # [SECTION 1: PROJECT STRUCTURE]
      project_structure: 'feature_first' # Options: 'layer_first' or 'feature_first'

      # For 'feature_first' structure.
      feature_first_paths:
        # The root directory for features, relative to the 'lib' directory.
        features_root: "features"

      # For 'layer_first' structure (not used in this example, but shown for completeness).
      layer_first_paths:
        domain: "domain"
        data: "data"
        presentation: "presentation"

      # [SECTION 2: LAYER & DIRECTORY DEFINITIONS]
      # Define the canonical names for your sub-directories within each layer.
      layer_definitions:
        domain:
          entities: ['entities']
          repositories: ['repositories']
          use_cases: ['usecases']
        data:
          repositories: ['repositories']
          data_sources: ['datasources']
          models: ['models']
        presentation:
          pages: ['pages']
          widgets: ['widgets']
          managers: ['bloc', 'cubit', 'provider']

      # [SECTION 3: NAMING CONVENTIONS]
      # Use {{name}} as a placeholder for the base name (e.g., 'Auth' in 'AuthRepository').
      naming_conventions:
        model: '{{name}}Model'
        use_case: '{{name}}Usecase'
        use_case_record_parameter: '_{{name}}Params'
        repository_interface: '{{name}}Repository'
        repository_implementation: '{{name}}RepositoryImpl'
        data_source_interface: '{{name}}DataSource'
        data_source_implementation: 'Default{{name}}DataSource'


      # [SECTION 4: TYPE SAFETY RULES]
      # Enforce that methods in certain layers return specific types.
      type_safety:
        # Uses the `FutureEither` typedef provided by `architecture_kit`.
        return_type_name: ['FutureEither']
        import_path: ['/core/utils/types.dart']
        apply_to: ['usecases', 'repository_interface']

      # [SECTION 5: INHERITANCE AND BASE CLASSES]
      # These paths point to the base classes provided by `architecture_kit` itself,
      # allowing for an out-of-the-box experience.
      inheritance:
        repository_base_path: '/core/repository/repository.dart'
        repository_base_name: 'Repository'

        unary_use_case_path: '/core/usecase/usecase.dart'
        unary_use_case_name: 'UnaryUsecase'

        nullary_use_case_path: '/core/usecase/usecase.dart'
        nullary_use_case_name: 'NullaryUsecase'

      # [SECTION 6: GENERATION OPTIONS]
      # Optionally add annotations (like for dependency injection) to generated use cases.
      generation_options:
        use_case_annotations:
          - import_path: 'package:injectable/injectable.dart'
            annotation_text: 'Injectable()'